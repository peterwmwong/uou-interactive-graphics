#![allow(non_upper_case_globals, non_snake_case)]
/**************************************************************************************************
 GENERATED FILE. DO NOT MODIFY.

 This file is generated by the `metal_build` crate, check you're `build.rs` for
 `metal_build::build()`.
 Structs and Enums are generated based on `src/shader_bindings.h` and `src/shaders.metal`.
***************************************************************************************************/
#[allow(unused_imports)]
use metal_app::{metal::*, metal_types::*, pipeline::*};
/* automatically generated by rust-bindgen 0.60.1 */

#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub struct ModelSpace2 {
    pub m_model_to_projection: float4x4,
    pub m_model_to_camera: float4x4,
}
#[test]
fn bindgen_test_layout_ModelSpace2() {
    assert_eq!(
        ::std::mem::size_of::<ModelSpace2>(),
        128usize,
        concat!("Size of: ", stringify!(ModelSpace2))
    );
    assert_eq!(
        ::std::mem::align_of::<ModelSpace2>(),
        16usize,
        concat!("Alignment of ", stringify!(ModelSpace2))
    );
    fn test_field_m_model_to_projection() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ModelSpace2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).m_model_to_projection) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ModelSpace2),
                "::",
                stringify!(m_model_to_projection)
            )
        );
    }
    test_field_m_model_to_projection();
    fn test_field_m_model_to_camera() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ModelSpace2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).m_model_to_camera) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(ModelSpace2),
                "::",
                stringify!(m_model_to_camera)
            )
        );
    }
    test_field_m_model_to_camera();
}
impl Default for ModelSpace2 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

/****************
 Shader functions
*****************/

#[allow(non_camel_case_types)]
pub struct gbuf_vertex_binds<'c> {
    pub geometry: Bind<'c, GeometryNoTxCoords>,
    pub model: Bind<'c, ModelSpace2>,
}
impl Binds for gbuf_vertex_binds<'_> {
    const SKIP: Self = Self {
        geometry: Bind::Skip,
        model: Bind::Skip,
    };

    #[inline(always)]
    fn bind<F: PipelineFunctionType>(self, encoder: &F::CommandEncoder) {
        self.geometry.bind::<F>(encoder, 0);
        self.model.bind::<F>(encoder, 1);
    }
}

#[allow(non_camel_case_types)]
pub struct gbuf_vertex;
impl metal_app::pipeline::function::Function for gbuf_vertex {
    const FUNCTION_NAME: &'static str = "gbuf_vertex";
    type Binds<'c> = gbuf_vertex_binds<'c>;
}
impl PipelineFunction<VertexFunctionType> for gbuf_vertex {}

#[allow(non_camel_case_types)]
pub struct gbuf_fragment;
impl metal_app::pipeline::function::Function for gbuf_fragment {
    const FUNCTION_NAME: &'static str = "gbuf_fragment";
    type Binds<'c> = NoBinds;
}
impl PipelineFunction<FragmentFunctionType> for gbuf_fragment {}

#[allow(non_camel_case_types)]
pub struct lighting_vertex_binds<'c> {
    pub m_projection_to_camera: Bind<'c, float4x4>,
}
impl Binds for lighting_vertex_binds<'_> {
    const SKIP: Self = Self {
        m_projection_to_camera: Bind::Skip,
    };

    #[inline(always)]
    fn bind<F: PipelineFunctionType>(self, encoder: &F::CommandEncoder) {
        self.m_projection_to_camera.bind::<F>(encoder, 0);
    }
}

#[allow(non_camel_case_types)]
pub struct lighting_vertex;
impl metal_app::pipeline::function::Function for lighting_vertex {
    const FUNCTION_NAME: &'static str = "lighting_vertex";
    type Binds<'c> = lighting_vertex_binds<'c>;
}
impl PipelineFunction<VertexFunctionType> for lighting_vertex {}

#[allow(non_camel_case_types)]
pub struct lighting_fragment_binds<'c> {
    pub camera: Bind<'c, ProjectedSpace>,
    pub light_pos_cam: Bind<'c, float3>,
}
impl Binds for lighting_fragment_binds<'_> {
    const SKIP: Self = Self {
        camera: Bind::Skip,
        light_pos_cam: Bind::Skip,
    };

    #[inline(always)]
    fn bind<F: PipelineFunctionType>(self, encoder: &F::CommandEncoder) {
        self.camera.bind::<F>(encoder, 0);
        self.light_pos_cam.bind::<F>(encoder, 1);
    }
}

#[allow(non_camel_case_types)]
pub struct lighting_fragment {
    pub HasAmbient: bool,
    pub HasDiffuse: bool,
    pub OnlyNormals: bool,
    pub HasSpecular: bool,
}
impl metal_app::pipeline::function::Function for lighting_fragment {
    const FUNCTION_NAME: &'static str = "lighting_fragment";
    type Binds<'c> = lighting_fragment_binds<'c>;
    #[inline]
    fn get_function_constants(&self) -> Option<FunctionConstantValues> {
        let fcv = FunctionConstantValues::new();
        fcv.set_constant_value_at_index((&self.HasAmbient as *const _) as _, bool::MTL_DATA_TYPE, 0);
        fcv.set_constant_value_at_index((&self.HasDiffuse as *const _) as _, bool::MTL_DATA_TYPE, 1);
        fcv.set_constant_value_at_index((&self.OnlyNormals as *const _) as _, bool::MTL_DATA_TYPE, 2);
        fcv.set_constant_value_at_index((&self.HasSpecular as *const _) as _, bool::MTL_DATA_TYPE, 3);
        Some(fcv)
    }
}
impl PipelineFunction<FragmentFunctionType> for lighting_fragment {}

#[allow(non_camel_case_types)]
pub struct light_vertex_binds<'c> {
    pub camera: Bind<'c, ProjectedSpace>,
    pub light_pos: Bind<'c, float4>,
}
impl Binds for light_vertex_binds<'_> {
    const SKIP: Self = Self {
        camera: Bind::Skip,
        light_pos: Bind::Skip,
    };

    #[inline(always)]
    fn bind<F: PipelineFunctionType>(self, encoder: &F::CommandEncoder) {
        self.camera.bind::<F>(encoder, 0);
        self.light_pos.bind::<F>(encoder, 1);
    }
}

#[allow(non_camel_case_types)]
pub struct light_vertex;
impl metal_app::pipeline::function::Function for light_vertex {
    const FUNCTION_NAME: &'static str = "light_vertex";
    type Binds<'c> = light_vertex_binds<'c>;
}
impl PipelineFunction<VertexFunctionType> for light_vertex {}

#[allow(non_camel_case_types)]
pub struct light_fragment;
impl metal_app::pipeline::function::Function for light_fragment {
    const FUNCTION_NAME: &'static str = "light_fragment";
    type Binds<'c> = NoBinds;
}
impl PipelineFunction<FragmentFunctionType> for light_fragment {}
