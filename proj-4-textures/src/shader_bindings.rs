#![allow(deref_nullptr, non_upper_case_globals, non_snake_case)]
/**************************************************************************************************
 GENERATED FILE. DO NOT MODIFY.

 This file is generated by the `metal_build` crate, check you're `build.rs` for
 `metal_build::build()`.
 Structs and Enums are generated based on `shader_src/common.h`.
***************************************************************************************************/
#[allow(unused_imports)]
use metal_build::metal_types::*;
/* automatically generated by rust-bindgen 0.59.2 */

#[repr(u8)]
#[doc = " <div rustbindgen nodebug></div>"]
#[derive(Copy, Clone, Hash, PartialEq, Eq)]
pub enum FC {
    HasAmbient = 0,
    HasDiffuse = 1,
    HasNormal = 2,
    HasSpecular = 3,
}
#[repr(C)]
#[derive(Copy, Clone, PartialEq, Eq)]
pub struct Geometry {
    pub indices: ::std::os::raw::c_ulong,
    pub positions: ::std::os::raw::c_ulong,
    pub normals: ::std::os::raw::c_ulong,
    pub tx_coords: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout_Geometry() {
    assert_eq!(
        ::std::mem::size_of::<Geometry>(),
        32usize,
        concat!("Size of: ", stringify!(Geometry))
    );
    assert_eq!(
        ::std::mem::align_of::<Geometry>(),
        8usize,
        concat!("Alignment of ", stringify!(Geometry))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Geometry>())).indices as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Geometry),
            "::",
            stringify!(indices)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Geometry>())).positions as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Geometry),
            "::",
            stringify!(positions)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Geometry>())).normals as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Geometry),
            "::",
            stringify!(normals)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Geometry>())).tx_coords as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Geometry),
            "::",
            stringify!(tx_coords)
        )
    );
}
#[repr(C)]
#[repr(align(16))]
pub struct World {
    pub matrix_model_to_projection: float4x4,
    pub matrix_normal_to_world: float3x3,
    pub matrix_world_to_projection: float4x4,
    pub matrix_screen_to_world: float4x4,
    pub light_position: float4,
    pub camera_position: float4,
}
#[test]
fn bindgen_test_layout_World() {
    assert_eq!(
        ::std::mem::size_of::<World>(),
        272usize,
        concat!("Size of: ", stringify!(World))
    );
    assert_eq!(
        ::std::mem::align_of::<World>(),
        16usize,
        concat!("Alignment of ", stringify!(World))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<World>())).matrix_model_to_projection as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(World),
            "::",
            stringify!(matrix_model_to_projection)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<World>())).matrix_normal_to_world as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(World),
            "::",
            stringify!(matrix_normal_to_world)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<World>())).matrix_world_to_projection as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(World),
            "::",
            stringify!(matrix_world_to_projection)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<World>())).matrix_screen_to_world as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(World),
            "::",
            stringify!(matrix_screen_to_world)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<World>())).light_position as *const _ as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(World),
            "::",
            stringify!(light_position)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<World>())).camera_position as *const _ as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(World),
            "::",
            stringify!(camera_position)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone, PartialEq)]
pub struct Material {
    pub ambient_texture: ::std::os::raw::c_ulong,
    pub diffuse_texture: ::std::os::raw::c_ulong,
    pub specular_texture: ::std::os::raw::c_ulong,
    pub specular_shineness: f32,
}
#[test]
fn bindgen_test_layout_Material() {
    assert_eq!(
        ::std::mem::size_of::<Material>(),
        32usize,
        concat!("Size of: ", stringify!(Material))
    );
    assert_eq!(
        ::std::mem::align_of::<Material>(),
        8usize,
        concat!("Alignment of ", stringify!(Material))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Material>())).ambient_texture as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Material),
            "::",
            stringify!(ambient_texture)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Material>())).diffuse_texture as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Material),
            "::",
            stringify!(diffuse_texture)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Material>())).specular_texture as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Material),
            "::",
            stringify!(specular_texture)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Material>())).specular_shineness as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Material),
            "::",
            stringify!(specular_shineness)
        )
    );
}
#[repr(u32)]
#[doc = " <div rustbindgen nodebug></div>"]
#[derive(Copy, Clone, Hash, PartialEq, Eq)]
pub enum VertexBufferIndex {
    Geometry = 0,
    World = 1,
    LENGTH = 2,
}
#[repr(u32)]
#[doc = " <div rustbindgen nodebug></div>"]
#[derive(Copy, Clone, Hash, PartialEq, Eq)]
pub enum FragBufferIndex {
    Material = 0,
    World = 1,
    LENGTH = 2,
}
#[repr(u32)]
#[doc = " <div rustbindgen nodebug></div>"]
#[derive(Copy, Clone, Hash, PartialEq, Eq)]
pub enum LightVertexBufferIndex {
    World = 0,
    LENGTH = 1,
}
